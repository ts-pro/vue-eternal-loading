import{_ as o,c as a,o as n,a as e,b as s}from"./app.9013c3dc.js";const D=JSON.parse('{"title":"Loader margin","description":"","frontmatter":{},"headers":[],"relativePath":"guide/loader-margin.md"}'),r={name:"guide/loader-margin.md"},t=e(`<h1 id="loader-margin" tabindex="-1">Loader margin <a class="header-anchor" href="#loader-margin" aria-hidden="true">#</a></h1><p>In the previous examples, the <code>load</code> prop was triggered when the loader became visible on the screen or within the specified container element (depending on the <code>container</code> prop). However, there may be situations where you want to start the loading process a bit earlier to provide a more seamless experience for the user. This can be achieved using the <code>margin</code> prop, which accepts parameters in pixels or percentages as a string.</p><p>The <code>margin</code> prop is passed as the <code>rootMargin</code> parameter to the underlying <code>IntersectionObserver</code>. You can refer to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin" target="_blank" rel="noreferrer">Mozilla Developer Network (MDN) documentation</a> for more information on the different formats and options for <code>rootMargin</code>.</p><p>In most cases, specifying the <code>margin</code> as a single value in pixels (e.g., <code>200px</code>) will cover the most common scenarios, so there is no need to delve into the details of other format options unless required for specific use cases.</p><div class="language-html"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">VueEternalLoading</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:load</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">margin</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">200px</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">VueEternalLoading</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,5),i=s("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/omf723ve/52/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),c=e("<p>In the example mentioned above, we created an invisible bounding box with a margin of <code>200px</code> around our <code>VueEternalLoading</code> component markup. This means that the load prop will be triggered <code>200px</code> earlier, as if the bounding box were <code>200px</code> larger in all directions.</p><p>The significant aspect to note is that the <code>margin</code> prop does not affect your layout in any way, unlike the <strong>css margin</strong> property, which pushes content if specified. The <code>margin</code> prop purely influences the triggering of the <code>load</code> prop and the timing of when the loading process starts, ensuring a smoother user experience.</p>",2),l=[t,i,c];function p(d,h,g,m,u,_){return n(),a("div",null,l)}const y=o(r,[["render",p]]);export{D as __pageData,y as default};
