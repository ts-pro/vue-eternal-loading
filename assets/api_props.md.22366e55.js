import{_ as s,c as a,o as n,a as l}from"./app.9013c3dc.js";const u=JSON.parse('{"title":"Props","description":"","frontmatter":{},"headers":[{"level":2,"title":"load","slug":"load","link":"#load","children":[]},{"level":2,"title":"isInitial","slug":"isinitial","link":"#isinitial","children":[]},{"level":2,"title":"position","slug":"position","link":"#position","children":[]},{"level":2,"title":"container","slug":"container","link":"#container","children":[]},{"level":2,"title":"margin","slug":"margin","link":"#margin","children":[]}],"relativePath":"api/props.md"}'),e={name:"api/props.md"},o=l(`<h1 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h1><h2 id="load" tabindex="-1">load <a class="header-anchor" href="#load" aria-hidden="true">#</a></h2><ul><li>Type: <code>(action: LoadAction, payload: LoadPayload) =&gt; void</code></li><li><strong>Required</strong></li></ul><p>Callback prop which is called when it&#39;s time to load new items ( loader is visible to user ). Accepts 2 arguments:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Call when you finished loading data</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Optional params:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">//   - count - how many items has been loaded</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">//   - pageSize - items per page count</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Returns:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">//  - State ( &#39;loading&#39;, &#39;no-more&#39;, &#39;no-results&#39; )</span></span>
<span class="line"><span style="color:#A6ACCD;">    loaded</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Call when you have no more item</span></span>
<span class="line"><span style="color:#A6ACCD;">    noMore</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Call if you have no items at all</span></span>
<span class="line"><span style="color:#A6ACCD;">    noResults</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Call if you caught an error</span></span>
<span class="line"><span style="color:#A6ACCD;">    error</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Indicates is it was first load</span></span>
<span class="line"><span style="color:#A6ACCD;">    isFirstLoad</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="isinitial" tabindex="-1">isInitial <a class="header-anchor" href="#isinitial" aria-hidden="true">#</a></h2><ul><li>Type: <code>boolean</code></li><li>Default: <code>true</code></li></ul><p>Tells component is it first loading or not. Can be used with v-model to reset component if set it to true after component creation.</p><p>Using prop:</p><div class="language-html"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">VueEternalLoading</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:load</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:is-initial</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">isInitial</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">VueEternalLoading</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Using v-model ( can be reset ):</p><div class="language-html"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">VueEternalLoading</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:load</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model:is-initial</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">isInitial</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">VueEternalLoading</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="position" tabindex="-1">position <a class="header-anchor" href="#position" aria-hidden="true">#</a></h2><ul><li>Type: <code>Position</code></li><li>Default: <code>default</code></li><li>Values: <code>&#39;top&#39;</code> | <code>&#39;left&#39;</code> | <code>&#39;default&#39;</code></li></ul><p>Tells where <strong>vue-eternal-loader</strong> is. It is required for <code>top</code> / <code>left</code> positions for correct scroll calculations.</p><h2 id="container" tabindex="-1">container <a class="header-anchor" href="#container" aria-hidden="true">#</a></h2><ul><li>Type: <code>HTMLElement</code></li><li>Default: <code>document.documentElement</code></li></ul><p>Required if your scroll area is not the whole document ( <code>document.documentElement</code> ) and your position <code>top</code> or <code>left</code>. This prop tells where the scroll is, to scroll right container.</p><h2 id="margin" tabindex="-1">margin <a class="header-anchor" href="#margin" aria-hidden="true">#</a></h2><p>Added in <code>v1.1.0</code></p><ul><li>Type: <code>string</code></li><li>Default: <code>undefined</code></li></ul><p>Creates invisible bounding box around <code>vue-eternal-loading</code> which trigger <code>load</code> prop. Normally it may be specified in pixels ( e.g. <code>200px</code> ). All formats available <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin" target="_blank" rel="noreferrer">here</a>.</p>`,22),p=[o];function t(i,c,r,d,D,y){return n(),a("div",null,p)}const h=s(e,[["render",t]]);export{u as __pageData,h as default};
