import{_ as e,c as n,o,a as s,b as a}from"./app.9013c3dc.js";const v=JSON.parse('{"title":"Loading states","description":"","frontmatter":{},"headers":[],"relativePath":"guide/loading-states.md"}'),l={name:"guide/loading-states.md"},t=s(`<h1 id="loading-states" tabindex="-1">Loading states <a class="header-anchor" href="#loading-states" aria-hidden="true">#</a></h1><p><strong>vue-eternal-loading</strong> component has 4 different states which can render different templates and have influence on component&#39;s behaviour:</p><ul><li><p><strong>loading</strong> - it&#39;s a default state when we try to load some new content. In this state <code>load</code> prop triggers automatically when it needed. Default template: <code>&lt;div class=&quot;loading&quot;&gt;Loading...&lt;/div&gt;</code></p></li><li><p><strong>no-more</strong> - this state means than we have no more content ( server replied with empty content or content less than full page ). In this state <code>load</code> is not calling anymore. Default template: <code>&lt;div class=&quot;no-more&quot;&gt;No more.&lt;/div&gt;</code></p></li><li><p><strong>no-results</strong> - this state means that we have no content at all. Maybe we have tried to load something from a server, but we got 0 items in our first request, and in this case we may want to show &#39;No results message&#39;. In this state <code>load</code> is not calling anymore. Default template: <code>&lt;div class=&quot;no-results&quot;&gt;No results.&lt;/div&gt;</code></p></li><li><p><strong>error</strong> - this state indicates that we got an error from the server or anywhere else. In this state <code>load</code> is not calling anymore. Default template: <code>&lt;div class=&quot;error&quot;&gt;Error.&lt;/div&gt;</code></p></li></ul><p>We can switch between states automatically, just using <code>loaded</code> callback inside <code>load</code> prop method, and we&#39;ll describe it below. Or we can set any state manually, and we will explain it in the further section.</p><hr><p>In some cases we may not want to have state different from <strong>loading</strong>. For example, when we want to implement loading which shouldn&#39;t stop ever. It can be logs loading, realtime news loading or just trying to load something forever. To have this behaviour we have to call <code>loaded</code> callback without params:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">loaded</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Load data from server</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">loaded</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,7),p=a("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/0ak1f69t/5/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),c=s(`<hr><p>If we use <code>loaded</code> callback with 1 param ( items count ) we can rich 2 states now: <code>no-more</code>, <code>no-results</code>. We may want to have this states to render corresponding templates. If we call <code>loaded(0)</code> on our first load - we will get <strong>no-results</strong> state.</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">loaded</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Load data from server</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// And items.length === 0 </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">loaded</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,3),r=a("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/4gdht3ap/3/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),d=s(`<p>If we call <code>loaded(0)</code> on our second+ load - we will get <strong>no-more</strong> state. Which means that we have loaded content before, but we reached the end now.</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">loaded</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Load data from server</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// items.length === 0 and this is 2+ try</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">loaded</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,2),i=a("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/uwapjzk8/6/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),y=s(`<p>You can admit in example above that we have 1 extra request, before we riched state <code>no-more</code>. It happens because we do not know exact page size and we can set state <code>no-more</code> only if we get empty response. It&#39;s okay if you don&#39;t know for sure what&#39;s your page size or you may have floating items count per request. But in case when you expect exact items count per page it&#39;s a good practice to pass second param to <code>loaded</code> callback, where you should specify your page size. It prevents unnecessary extra request to server and set state <code>no-more</code> when we will get items count less than page size:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> PAGE_SIZE </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">loaded</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Load data from server</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">loaded</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PAGE_SIZE</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,2),F=a("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/pe58wszL/78/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),D=s(`<hr><p>We have one more state <code>error</code>, but we can&#39;t rich it automatically, just using <code>loaded</code> callback. It&#39;s because <strong>vue-eternal-loading</strong> have no idea about loading errors, and it can switch states based on information which you pass to <code>loaded</code> and it&#39;s not enough information to set <code>error</code> state. How to set <code>error</code> state manually we will learn further in the next sections.</p><hr><p>If you want to know which state now is inside <code>load</code> function - <code>loaded()</code> callback returns it for you.</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">loaded</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Load data from server</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">loaded</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">no-more</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Boom! You have reached the end.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,5),u=[t,p,c,r,d,i,y,F,D];function h(A,g,m,C,_,w){return o(),n("div",null,u)}const b=e(l,[["render",h]]);export{v as __pageData,b as default};
